"""
Django settings for ch project.
Generated by 'django-admin startproject' using Django 5.1.1.
For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""






from pathlib import Path
import dj_database_url
import os

BASE_DIR = Path(__file__).resolve().parent.parent


# -------------------------------------------------------------------------------------------------------------------------

# API KEYS

# load github access token 
from dotenv import load_dotenv

load_dotenv()  # Load environment variables

GITHUB_ACCESS_TOKEN = os.getenv("GITHUB_ACCESS_TOKEN")
client = os.getenv('client')


# FILE UPLOAD SIZE LIMIT

# Increase max upload size (e.g., 100MB)
DATA_UPLOAD_MAX_MEMORY_SIZE = 500 * 1024 * 1024  # 100MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 500 * 1024 * 1024  # 100MB



# --------------------------------------------------------------------------------------------------------------------

STATIC_URL = '/static/'

STATIC_ROOT = BASE_DIR / 'staticfiles'


STATICFILES_DIRS = [
    BASE_DIR / 'static',  
]


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'



SECRET_KEY ='django-insecure-2_5v35*4-ylcnkadmjcbghfoa3^fhq8%kun$ywajnp7jd3_s2j'



DEBUG = True 

ALLOWED_HOSTS = []

import os 

DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'


MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')




# Application definition

INSTALLED_APPS = [  
    'gui_apps',
    'app_marketplace',
    'conversation',
    # 'axes',
    'alert',
    'outh',
    'profiles',
    'organizations',
    'meet',
    'calendar_plus',
    'daphne',
    'ai',
    'channels',
    'chat',
    'accounts',
    'notify',
    'new_roles',
    'rest_framework',
    'workspace_tasks',
    'corsheaders',
    'tinymce',
    'contacts',
    'security',
    'groups',
    'group_tasks',
    'widget_tweaks',
    'ckeditor_uploader',
    'organization_channels',
    'formtools',
    'cal_ai',
    'django_quill',
    'subscription',
    'dashboard',
    'widgets_functionality',
    'calculation_widget',
    'workload',
    'progress_widget',
    'bookmarks_widget',
    'channels_widget',
    'time_traced',
    'all_tasks_widget',
    'discussion_widget',
    'event_widget',
    'tasks_progress_widget',

    #  Unfold admin configurations
    "unfold",  # before django.contrib.admin
    "unfold.contrib.filters",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'rest_framework.authtoken',  
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    "organizations.middlewares.OrganizationPasswordMiddleware",  # Workspace Argon2 password check
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'meet.middlewares.AdminOnlyMiddleware',
    'ch.middlewares.CheckEmailMiddleware',
    'ch.middlewares.FirstTimeGuideMiddleware',
    'ch.middlewares.OrgGuideMiddleware',
    'group_tasks.middlewares.RewardRedirectMiddleware',
    'subscription.middlewares.ImpersonationMiddleware',
    'bookmarks_widget.middlewares.ActivityCaptureMiddleware',
    # 'axes.middleware.AxesMiddleware',
    # 'group_tasks.middlewares.RecentActivityMiddleware',

]


# settings.py
ORG_PASSWORD_SECRET_KEY = "PjLfYgjup0lHhqJXrfaLO4TzjfvG8rDxURhul1qZJ8U="  # Generate once and store securely



ROOT_URLCONF = 'ch.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR,'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                # Custom context processor

                'calendar_plus.context_processors.user_profile',
            ],
        },
    },
]

ASGI_APPLICATION = 'ch.asgi.application'

# WSGI_APPLICATION = 'ch.wsgi.application'


# Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql', 
        'HOST': '127.0.0.1',
        'PORT': '5432',
        'NAME': 'calendar_pro', 
        'USER': 'postgres',  
        'PASSWORD': 'skl12qw@#',  
    }
}

# RENDER EXTERNAL DATABASE URL 



# DATABASES["default"] = dj_database_url.parse("postgresql://calendar_p_lus_database_user:bPydl91jveJL1UvAyqC1tKpXBXJDl2BU@dpg-cujobeogph6c73bjh4h0-a.oregon-postgres.render.com/calendar_p_lus_database")

# # postgresql://calendar_p_lus_database_user:bPydl91jveJL1UvAyqC1tKpXBXJDl2BU@dpg-cujobeogph6c73bjh4h0-a.oregon-postgres.render.com/calendar_p_lus_database



CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
    },
}



AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True



# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

import os

STATIC_URL = '/static/'


STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'ch/static'), 
]


# rest framework configuration

REST_FRAMEWORK={
    'DEFAULT_PAGINATION_CLASS':'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE':2,
    'DEFAULT_THROTTLE_CLASSES':[
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES':{
        'anon':'1/day',
        'user':'100/min'
    },
}

# EMAIL BACKEND SERVICES

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587 
EMAIL_HOST_USER = 'vishaldudhabarve105@gmail.com'
EMAIL_HOST_PASSWORD = 'xwpc kebq cwkl egvb' 
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = 'vishaldudhabarve105@gmail.com'




# set redis as the message broker 
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/0'  

CELERY_TIMEZONE = "Asia/Kolkata"
CELERY_RESULT_EXTENDED = True

# Celery Beat settings for periodic tasks
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'


# json as the task serializer
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']


import logging

logging.basicConfig(level=logging.DEBUG)



CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_ALL_ORIGINS = True



# credentials.json

SESSION_ENGINE = 'django.contrib.sessions.backends.db'

SESSION_COOKIE_AGE = 1209600  
import os
import os

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Correct MEDIA settings
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media") 

SITE_URL = ' http://127.0.0.1:8000/calendar'






STATIC_URL = '/static/'


STATICFILES_DIRS = [
    BASE_DIR ,"static",
]



STATIC_URL = '/static/'  

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'), ]

# If using collectstatic for production
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  


# GOOGLE CALENDAR  CREDENTIALS


GOOGLE_CLIENT_ID = "854433356192-d81dha5vahp50pj5f8g5c9fqesd7flti.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET = "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"
GOOGLE_REDIRECT_URI = "http://localhost:8000/oauth/callback/"





# SECURITY FEATURES 

#  Session Expiry & Auto Logout (Prevent Stolen Sessions)

# SESSION_COOKIE_AGE = 1800 
# SESSION_EXPIRE_AT_BROWSER_CLOSE = True  

#  Brute Force Attack Protection (Limit Login Attempts)

# AXES_FAILURE_LIMIT = 2  
# AXES_COOLOFF_TIME = 30  


# RAZORPAY PAYMENT GATEWAY 

RAZORPAY_KEY_ID = "rzp_test_jJJrl2JogIrKeo"
RAZORPAY_KEY_SECRET = "oqJBApRaO4rOYdd4cTcUc7m4"





# DJANGO ADMIN - UNFOLD THEME SET-UP
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _


UNFOLD = {
    "SITE_DROPDOWN": [
        {
            "icon": "diamond",
            "title": _("CalendarPlus"),
            "link": "http://127.0.0.1:8000/",
        },
        {
            "icon": "diamond",
            "title": _("Workspace"),
            "link": "http://127.0.0.1:8000/calendar/organizations/",
        },
    ]
}



from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _


UNFOLD = {
    "SITE_TITLE": "Administration | Calendar Plus",  # No _() needed here
    "SITE_HEADER": "CalendarPlus Administration",
    "SITE_SUBHEADER": "Powered By Django-Admin",
   
 
    "SHOW_HISTORY": True,
    "SHOW_VIEW_ON_SITE": True,
    "SHOW_BACK_BUTTON": True,
    "ENVIRONMENT": lambda request: ["Production", "danger"],  # ðŸ”¥ FIXED: No function call needed
    "DASHBOARD_CALLBACK": lambda request, context: dashboard_callback(request, context),
   
    "LOGIN": {
        "image": lambda request: static("sample/login-bg.jpg"),
        "redirect_after": lambda request: reverse_lazy("admin:auth_user_changelist"),
    },
    "STYLES": [
        lambda request: static("css/style.css"),
    ],
    "SCRIPTS": [
        lambda request: static("js/script.js"),
    ],
    "BORDER_RADIUS": "6px",
    "COLORS": {
        "base": {
            "50": "249 250 251",
            "100": "243 244 246",
            "200": "229 231 235",
            "300": "209 213 219",
            "400": "156 163 175",
            "500": "107 114 128",
            "600": "75 85 99",
            "700": "55 65 81",
            "800": "31 41 55",
            "900": "17 24 39",
            "950": "3 7 18",
        },
        "primary": {
            "50": "250 245 255",
            "100": "243 232 255",
            "200": "233 213 255",
            "300": "216 180 254",
            "400": "192 132 252",
            "500": "168 85 247",
            "600": "147 51 234",
            "700": "126 34 206",
            "800": "107 33 168",
            "900": "88 28 135",
            "950": "59 7 100",
        },
        "font": {
            "subtle-light": "var(--color-base-500)",
            "subtle-dark": "var(--color-base-400)",
            "default-light": "var(--color-base-600)",
            "default-dark": "var(--color-base-300)",
            "important-light": "var(--color-base-900)",
            "important-dark": "var(--color-base-100)",
        },
    },
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "ðŸ‡¬ðŸ‡§",
                "fr": "ðŸ‡«ðŸ‡·",
                "nl": "ðŸ‡§ðŸ‡ª",
            },
        },
    },
    "SIDEBAR": {
        "show_search": False,
        "show_all_applications": True,
        "navigation": [
            {
                "title": "Navigation",  # ðŸ”¥ FIXED: No _() because it's not user-facing
                "separator": True,
                "collapsible": True,
                "items": [
                    {
                        "title": _("Dashboard"),
                        "icon": "dashboard",
                        "link": lambda request: reverse_lazy("admin:index"),  # ðŸ”¥ FIXED
                        "badge": lambda request: 3,  # ðŸ”¥ FIXED: No function call needed
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Users"),
                        "icon": "people",
                        "link": lambda request: reverse_lazy("admin:auth_user_changelist"),
                    },
                ],
            },
        ],
    },
   
}

def dashboard_callback(request, context):
    """Prepares custom variables for the dashboard template."""
    context.update(
        {
            "sample": "example",
        }
    )
    return context