# Generated by Django 5.1.2 on 2025-01-07 16:37

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0044_remove_organization_company_holidays'),
        ('groups', '0008_groupevent_recurrence_days_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='A short and descriptive title for the task.', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Detailed description of the task.', null=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', help_text='The priority level of the task.', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled'), ('overdue', 'Overdue')], default='pending', help_text='The current status of the task.', max_length=20)),
                ('deadline', models.DateTimeField(help_text='The deadline for completing the task.')),
                ('start_date', models.DateTimeField(blank=True, help_text='The date and time when the task should start.', null=True)),
                ('end_date', models.DateTimeField(blank=True, help_text='The expected or actual completion date of the task.', null=True)),
                ('progress', models.PositiveIntegerField(default=0, help_text='Progress percentage (0-100) of task completion.')),
                ('is_recurring', models.BooleanField(default=False, help_text='Indicates if this task recurs on a schedule.')),
                ('recurrence_pattern', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], help_text='Pattern for recurring tasks.', max_length=50, null=True)),
                ('recurrence_end_date', models.DateField(blank=True, help_text='End date for the recurrence pattern.', null=True)),
                ('attachments', models.FileField(blank=True, help_text='Optional file attachments for the task.', null=True, upload_to='task_attachments/')),
                ('notify_assignee', models.BooleanField(default=True, help_text='Notify the assignee when the task is created or updated.')),
                ('is_urgent_notification_sent', models.BooleanField(default=False, help_text='Tracks if an urgent notification has been sent for this task.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Task creation timestamp.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Task last updated timestamp.')),
                ('assigned_to', models.ForeignKey(help_text='The group member to whom this task is assigned.', on_delete=django.db.models.deletion.CASCADE, related_name='assigned_tasks', to=settings.AUTH_USER_MODEL)),
                ('created_by', models.ForeignKey(help_text='The user who created this task (e.g., the team leader).', on_delete=django.db.models.deletion.CASCADE, related_name='created_tasks', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(help_text='The group this task belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='groups.group')),
                ('organization', models.ForeignKey(help_text='The organization under which this task is created.', on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to='accounts.organization')),
            ],
            options={
                'verbose_name': 'Task',
                'verbose_name_plural': 'Tasks',
                'ordering': ['-created_at'],
                'constraints': [models.CheckConstraint(condition=models.Q(('progress__gte', 0), ('progress__lte', 100)), name='valid_progress_range')],
            },
        ),
    ]
